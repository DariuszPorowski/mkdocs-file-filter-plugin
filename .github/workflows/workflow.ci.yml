---
name: CI
on:
  push:
    branches:
      - main
  pull_request:
    # https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows#pull_request
    types:
      - opened
      - reopened
      - synchronize
      - ready_for_review
    branches:
      - main
    paths:
      - "mkdocs_file_filter_plugin/**"
      - "poetry.lock"
      - "pyproject.toml"
      - "setup.py"

# Allow one concurrent
concurrency:
  group: ${{ format('{0}-{1}', github.event_name, github.ref) }}
  cancel-in-progress: true

permissions:
  contents: read

jobs:
  dependency-review:
    if: ${{ github.event_name == 'pull_request' && !github.event.pull_request.draft }}
    name: Dependency Review
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3

      - name: Run Dependency Review
        uses: actions/dependency-review-action@v3
        with:
          comment-summary-in-pr: true

  lint:
    if: ${{ github.event_name == 'push' || (github.event_name == 'pull_request' && !github.event.pull_request.draft) }}
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3

      - name: Install Poetry
        run: pipx install poetry

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"
          cache: poetry

      - name: Install dependencies
        run: |
          # poetry self add "poetry-dynamic-versioning[plugin]"
          poetry install --verbose --all-extras --only dev

      # - name: Run ruff
      #   run: poetry run ruff -v check .

      - name: Run mypy
        run: poetry run mypy --config-file pyproject.toml

      - name: Run isort
        run: poetry run isort --settings-path pyproject.toml --check-only .

      - name: Run black
        run: poetry run black  --config pyproject.toml --check .

      - name: Run flake8
        run: poetry run flake8 --count .

      - name: Run bandit
        run: poetry run bandit --configfile pyproject.toml --recursive .

  test:
    if: ${{ github.event_name == 'push' || (github.event_name == 'pull_request' && !github.event.pull_request.draft) }}
    name: Test
    needs:
      - lint
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11"]
        os: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3
        # with:
        #   fetch-depth: 0

      - name: Install Poetry
        run: pipx install poetry

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: poetry

      - name: Install dependencies
        run: |
          poetry self add "poetry-dynamic-versioning[plugin]"
          poetry install --verbose --all-extras

      - name: Test Build
        run: poetry build --verbose

      - name: Test MkDocs build
        run: poetry run mkdocs build --verbose
